plugins {
	id 'io.github.goooler.shadow'
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = file("${project(':common').projectDir}/src/main/resources/iceberg.accesswidener")
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common

	// Files in this configuration will be bundled into your mod using the Shadow plugin.
	// Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:$rootProject.fabricLoaderVersion"
	modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabricVersion"
	
	shadowBundle "com.electronwill.night-config:core:${project.nightconfigVersion}"
	shadowBundle "com.electronwill.night-config:toml:${project.nightconfigVersion}"	
	modImplementation "com.electronwill.night-config:core:${project.nightconfigVersion}"
	modImplementation "com.electronwill.night-config:toml:${project.nightconfigVersion}"

	modImplementation files("../libs/sodium-fabric-0.6.0-beta.2+mc1.21.1.jar")

	common(project(path: ':common', configuration: 'namedElements')) { transitive false }
	shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand version: project.version
	}
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'

	minimize {
		exclude(project(':common'))
	}
}

remapJar {
	input.set shadowJar.archiveFile
}
