plugins {
	id 'io.github.goooler.shadow'
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common

	// Files in this configuration will be bundled into your mod using the Shadow plugin.
	// Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

repositories {
	maven {
		name = 'NeoForged'
		url = 'https://maven.neoforged.net/releases'
	}
}

dependencies {
	neoForge "net.neoforged:neoforge:$rootProject.neoforgeVersion"
	modImplementation "curse.maven:embeddium-908741:5456706"
	implementation "net.bytebuddy:byte-buddy:1.14.18"

	common(project(path: ':common', configuration: 'namedElements')) { transitive false }
	shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
	outputs.upToDateWhen{ false }
	inputs.property 'version', project.version

	filesMatching('META-INF/neoforge.mods.toml') {
		expand version: project.version
	}
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

remapJar {
	input.set shadowJar.archiveFile
	atAccessWideners.add('iceberg.accesswidener')
}
